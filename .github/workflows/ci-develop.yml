# The CI pipeline to allow user to merge branch on develop.

name: CI for develop branch

on:
#  pull_request:
#    branches:
#      - develop
  workflow_dispatch:

jobs:
  lint:
    name: Code formatting check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle*', '**/settings.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Run Spotless check (code format)
        run: ./gradlew spotlessCheck

  unit-tests:
    name: Run unit tests with coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle*', '**/settings.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Run unit test with coverage threshold for API module (20%)
        run: ./gradlew :api:unitTest :api:jacocoUnitTestReport :api:jacocoUnitTestCoverageVerification -Plimit=0.2

      - name: Run unit test with coverage threshold for Shared module (80%)
        run: ./gradlew :shared:unitTest :shared:jacocoUnitTestReport :shared:jacocoUnitTestCoverageVerification -Plimit=0.8

      - name: Run unit test with coverage threshold for Authentication module (80%)
        run: ./gradlew :authentication:unitTest :authentication:jacocoUnitTestReport :authentication:jacocoUnitTestCoverageVerification -Plimit=0.8

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pae-api
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle*', '**/settings.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U testuser && break
            sleep 5
          done

      - name: Set up Flyway
        run: |
            curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
            sudo ln -s $(pwd)/flyway-*/flyway /usr/local/bin/flyway

      - name: Run Flyway migrations
        env:
          FLYWAY_URL: jdbc:postgresql://localhost:5432/pae-api
          FLYWAY_USER: testuser
          FLYWAY_PASSWORD: testpass
          FLYWAY_LOCATIONS: filesystem:migrations/src/main/resources/db/migration
        run: flyway migrate

      - name: Run integration tests
        env:
          USE_TESTCONTAINERS: false
        run: ./gradlew integrationTest

      - name: Upload integration test reports
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: |
            shared/build/reports/tests/integrationTest
            authentication/build/reports/tests/integrationTest
            api/build/reports/tests/integrationTest

  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    services:
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: pae-api
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle*', '**/settings.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U testuser && break
            sleep 5
          done

      - name: Set up Flyway
        run: |
          curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
          sudo ln -s $(pwd)/flyway-*/flyway /usr/local/bin/flyway

      - name: Run Flyway migrations
        env:
          FLYWAY_URL: jdbc:postgresql://localhost:5432/pae-api
          FLYWAY_USER: testuser
          FLYWAY_PASSWORD: testpass
          FLYWAY_LOCATIONS: filesystem:migrations/src/main/resources/db/migration
        run: flyway migrate

      - name: Run functional tests
        env:
          USE_TESTCONTAINERS: false
        run: ./gradlew functionalTest

      - name: Upload functional test reports
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-reports
          path: |
            shared/build/reports/tests/functionalTest
            authentication/build/reports/tests/functionalTest
            api/build/reports/tests/functionalTest

  clean_build:
    name: Clean build (no tests)
    runs-on: ubuntu-latest
    needs: functional-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle*', '**/settings.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Java 24
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Run clean build without test
        run: ./gradlew clean build -x test