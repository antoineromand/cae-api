name: Release pipeline

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 24

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install conventional-changelog-cli
        run: npm install -g conventional-changelog-cli

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Get latest tag (robust)
        id: tag
        run: |
          TAG=$(git tag --sort=-creatordate | head -n1)
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Confirm version with Axion Release
        id: version
        run: |
          VERSION=$(./gradlew -q currentVersion | grep -oE '[0-9]+\.[0-9]+\.[0-9]+([-\.][a-zA-Z0-9]+)*')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b release/v${{ steps.version.outputs.version }}
          git push origin release/v${{ steps.version.outputs.version }}

      - name: Generate and commit changelog
        run: |
          LAST_TAG=${{ steps.tag.outputs.latest_tag }}
          PREV_TAG=$(git tag --sort=-creatordate | grep -B1 $LAST_TAG | head -n1)
          echo "Generating changelog from $PREV_TAG to $LAST_TAG"
          
          # Generate changelog using conventional-changelog
          conventional-changelog -p angular -r 0 -o CHANGELOG.md
          
          # Configure git
          git config user.name "grisou"
          git config user.email "grisou@pickandeat.org"
          
          # Ensure we're on the correct branch
          git checkout release/v${{ steps.version.outputs.version }}
          
          # Stage only CHANGELOG.md
          git add CHANGELOG.md
          
          # Check if there are actual changes to commit
          if git diff --cached --quiet; then
            echo "No changelog changes detected, skipping commit"
          else
            git commit -m "docs(changelog): update for release v${{ steps.version.outputs.version }}"
            git push origin release/v${{ steps.version.outputs.version }}
          fi
          
          # Verify README hasn't been modified
          if ! git diff --quiet HEAD^ HEAD -- README.md 2>/dev/null; then
            echo "Error: README.md was unexpectedly modified"
            git checkout HEAD^ -- README.md
            git commit -m "revert: undo unwanted README.md changes" || true
            git push origin release/v${{ steps.version.outputs.version }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          generate_release_notes: true
          files: CHANGELOG.md

      - name: Create PR to main
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: merge release v${{ steps.version.outputs.version }} into main"
          title: "Merge release v${{ steps.version.outputs.version }} into main"
          body: "Automated PR to merge release branch v${{ steps.version.outputs.version }} into main after tagging"
          base: main
          branch: release/v${{ steps.version.outputs.version }}
          token: ${{ secrets.GH_PAT }}